pipeline {
    triggers {
        upstream(threshold: hudson.model.Result.SUCCESS, upstreamProjects: "kanban-app-test")
    }
    parameters {
        extendedChoice(
            name: 'VERSION',
            description: 'Artifact version',
            multiSelectDelimiter: ',',
            visibleItemCount: 5,
            quoteValue: false,
            type: 'PT_SINGLE_SELECT',
            /* Default Property Value Settings */
            defaultPropertyFile: "/var/lib/jenkins/kanban_app_versions",
            defaultPropertyKey: 'last_v',
            /* Values List Settings */
            propertyFile: "/var/lib/jenkins/kanban_app_versions",
            propertyKey: "v"
            )

        choice(
            choices: ['dev' , 'train'],
            description: '',
            name: 'ENVIRONMENT')
    }
    environment {
        KANBAN_CREDENTIALS = credentials('kanban_db')
        AZURE_CREDS = credentials('registry')
    }
    agent any

    stages {
        stage('Deploy to dev') {
            when {
                expression { params.ENVIRONMENT == 'dev' }
            }
            steps {
                sh '''
                ssh -o StrictHostKeyChecking=no jenkins@aa-dev.westeurope.cloudapp.azure.com  << EOF
                 docker login academydevops.azurecr.io -u $AZURE_CREDS_USR -p $AZURE_CREDS_PSW
                 docker stop backend &> /dev/null
                 docker rm backend &> /dev/null
                 docker network create kanban &> /dev/null
                 docker run --network kanban -d -e DB_SERVER=db -e POSTGRES_DB=kanban -e POSTGRES_USER=$KANBAN_CREDENTIALS_USR -e POSTGRES_PASSWORD=$KANBAN_CREDENTIALS_PSW -p 8080:8080 --name backend academydevops.azurecr.io/aa/kanban-app:$VERSION
                 exit
                 EOF'''
            }
        }

        stage('Deploy to train') {
            when {
                expression { params.ENVIRONMENT == 'train' }
            }
            steps {
                sh '''
                 ssh -o StrictHostKeyChecking=no jenkins@aa-train.westeurope.cloudapp.azure.com  << EOF 
                 docker login academydevops.azurecr.io -u $AZURE_CREDS_USR -p $AZURE_CREDS_PSW
                 docker stop backend &> /dev/null
                 docker rm backend &> /dev/null
                 docker network create kanban &> /dev/null
                 docker run --network kanban -d -e DB_SERVER=db -e POSTGRES_DB=kanban -e POSTGRES_USER=$KANBAN_CREDENTIALS_USR -e POSTGRES_PASSWORD=$KANBAN_CREDENTIALS_PSW -p 8080:8080 --name backend academydevops.azurecr.io/aa/kanban-app:$VERSION
                 exit
                 EOF'''
               
                
            }
            
        }
        stage('Healthcheck'){
             steps {
                 sh '''
                 sleep 1.5m
                 curl -s http://aa-$ENVIRONMENT.westeurope.cloudapp.azure.com:8080/api/swagger-ui.html | grep 'springfox-swagger-ui'> /dev/null  || exit 1
                 '''
            }
        }

  }
}